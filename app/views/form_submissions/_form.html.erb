<%= render_card title: step_title do %>
  <div class="bg-destructive/15 text-destructive p-4 rounded-md hidden" data-form-target="errorContainer">
    <!-- Errors will be dynamically rendered here by the FormController -->
  </div>
  
  <%= form_with model: @form_submission,
                url: form_submission_path(id: @form_submission.id, step_id: @step_id),
                method: :patch,
                class: 'space-y-4',
                data: {
                  controller: 'form',
                  form_step_id_value: @step_id,
                  form_form_id_value: @form_submission.id,
                  form_requirements_value: @requirements.to_json
                } do |form| %>
    <%= yield form %>
  <% end %>
<% end %>

<script>
  // Initialize error container with existing errors
  document.addEventListener('DOMContentLoaded', function() {
    const errorContainer = document.querySelector('[data-form-target="errorContainer"]');
    const errors = <%= raw @form_submission.step_errors(@step_id).to_json %>;
    
    if (errorContainer && Object.keys(errors).length > 0) {
      errorContainer.classList.remove('hidden');
      
      const errorList = document.createElement('ul');
      errorList.classList.add('space-y-1', 'mt-2');
      
      Object.entries(errors).forEach(([field, error]) => {
        const errorItem = document.createElement('li');
        errorItem.classList.add('text-sm', 'font-medium');
        errorItem.textContent = `${field.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}: ${error}`;
        errorList.appendChild(errorItem);
      });
      
      errorContainer.appendChild(errorList);
    }
  });
</script>